args:
- name: ip
  required: true
- name: score
  required: true
- description: Abuse IPDB Usage Type
  name: UsageType
- name: list_name
  required: true
commonfields:
  id: 7750dacb-e94e-4818-8fae-a00ccc1335f8
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.78960
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Rahul_AbuseIPDBscoretolist
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  import json
  from datetime import datetime
  from typing import Dict, Any
  import traceback


  def add_entry_to_json(ip: str, score: str, list_name: str, usagetype:str):
      # Retrieve existing list data from Cortex XSOAR
      list_data = demisto.executeCommand("getList", {"listName": list_name})
      if list_data[0]["Type"] == entryTypes['error']:
          demisto.error(f"Failed to retrieve list: {list_data[0]['Contents']}")
          return

      # Parse the existing list data as JSON
      existing_list = None
      try:
          if(list_data[0]["Contents"] != ''):
              existing_list = json.loads(list_data[0]["Contents"])

      except json.JSONDecodeError:
          demisto.error("Failed to parse list data as JSON")
          return

      timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
      #changing into the required format
      new_value = {"Score": score, "Timestamp": timestamp, "Usage":usagetype}

      if(existing_list is not None):
          if(ip in existing_list):
              return f"{ip} already in the list "
          else:
              #adding the data to list
              demisto.executeCommand("AddKeyToList", {"listName":list_name,"value":new_value, "keyName": ip})
              return f"Added IP: {ip}, Score: {score} to list: {list_name}"
      else:
              demisto.executeCommand("AddKeyToList", {"listName":list_name,"value":new_value, "keyName": ip})
              return f"Added IP: {ip}, Score: {score} to list: {list_name}"

  def main():
      ip = demisto.args().get('ip')
      score = demisto.args().get('score')
      usagetype = demisto.args().get('UsageType')
      list_name = demisto.args().get('list_name')
      try:
          return_results(add_entry_to_json(ip, score, list_name,usagetype))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')

  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()


scripttarget: 0
subtype: python3
tags: []
type: python
