args:
- description: Name of the list
  name: list_name
  required: true
- description: Time to live in Firewall
  name: Threshold
  required: true
- description: listname of Malicious IP
  name: Malicious_IP_List_name
  required: true
commonfields:
  id: 9b722920-6c80-49f6-85fa-80e872392891
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.67728
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Rahul_unblock_oldIP_from_Cloudflare
outputs:
- contextPath: Olderips
  description: older Ip's output
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  from typing import Dict, Any
  import traceback
  import json
  from datetime import datetime, timedelta
  import re

  def remove_from_list(list_name: str, threshold :int):

      pattern = r"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"

      #Collecting data from list
      collect_datafrom_list = demisto.executeCommand("getList", {"listName": list_name})

      #parsing it to json for operations
      collectdates_fromlist = json.loads(collect_datafrom_list[0]["Contents"])
      datetime_format_in_list = "%Y-%m-%dT%H:%M:%SZ"
      datetime_format = "%Y-%m-%d %H:%M:%S"
      current_time = datetime.now()

      removed_key_list = []
      #empty dictionary to store the data after calulating the age of IP blocked
      ip_age_data = {}

      #for loop is to callulate the age of Blocked IP in firewall.
      for key in collectdates_fromlist:

          entry = collectdates_fromlist[key]
          entry_datetime = datetime.strptime(entry['Timestamp'],datetime_format_in_list)
          time_difference = current_time - entry_datetime
          ip_age_data[key] = time_difference.days

      #the Ip of aged above the threshold are extracted
      filtered_dict = {k: v for k, v in ip_age_data.items() if v > int(threshold)}
      #Arranging them in an descending order
      arrange_big_to_low = dict(sorted(filtered_dict.items(), key=lambda item: item[1], reverse=True))


      IPV4 = []
      eligible_for_unblock_IPV6 = []

      for key, value in arrange_big_to_low.items():

          if re.search(pattern, key):
              IPV4.append(key)
          else:
              eligible_for_unblock_IPV6.append(key)
      print('done')
      #Taking the top most 500 elements as we have the limit with abuse IPDB.
      top_500_above_threshold = dict(list(arrange_big_to_low.items())[:20])


      #creating the dictionaries to use them in future if needed
      eligible_for_unblock_IPV4 ={}
      not_eligible_for_unblock_IPV4 = {}

      for key in top_500_above_threshold:

          reputation_collect = demisto.executeCommand("ip", {"ip":key,"using":"AbuseIPDB_instance_2"})
          IP_reputation = reputation_collect[0]["EntryContext"]['AbuseIPDB(val.IP.Address && val.IP.Address == obj.IP.Address)'][0]
          IP_reputation_value = IP_reputation['IP']['AbuseConfidenceScore']
          if IP_reputation_value <=39:
              eligible_for_unblock_IPV4[key]=IP_reputation_value
          else:
              not_eligible_for_unblock_IPV4[key]=IP_reputation_value

      result = {
          "Total count of IP's blocked": len(collectdates_fromlist),
          "Total count of IP's greater than 60days":len(arrange_big_to_low),
          "oldest Ip in firewall" : str(next(iter(arrange_big_to_low.items()))),
          "Total count of eligible IP's for unblock" : len(eligible_for_unblock_IPV4)+len(eligible_for_unblock_IPV6)
      }

      demisto.setContext('Eligible_for_Unblock_IPV4',','.join(eligible_for_unblock_IPV4.keys()))
      demisto.setContext('Eligible_for_Unblock_IPV6',','.join(eligible_for_unblock_IPV6))
      demisto.setContext('Not_eligible_for_Unblock',','.join(not_eligible_for_unblock_IPV4.keys()))

      readable = tableToMarkdown("Output of the Script", result, headers=["Total count of IP's blocked","Total count of IP's greater than 60days","oldest Ip in firewall","Total count of eligible IP's for unblock"])

      results = CommandResults(
                  readable_output = readable,
                  outputs_prefix='Olderips',
                  outputs =result
                  )

      return (results)

  def main():
      list_name = demisto.args().get('list_name')
      threshold = demisto.args().get('Threshold')
      Malicious_IP_List_name = demisto.args().get('Malicious_IP_List_name')

      try:
          # TODO: replace the invoked command function with yours
          checkOlderips = remove_from_list(list_name, threshold)
          return_results(checkOlderips)
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
timeout: 600ns
type: python
