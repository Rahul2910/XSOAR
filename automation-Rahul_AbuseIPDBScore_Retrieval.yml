args:
- description: Source IP
  name: ip
  required: true
- description: List Name
  name: list_name
  required: true
commonfields:
  id: 17d75382-37bd-472f-828e-54b353f31d51
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.11.61265
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Rahul_AbuseIPDBScore_Retrieval
outputs:
- contextPath: AbuseIPDBscorefromList
  description: Score from List
  type: unknown
- contextPath: IP is in list
  description: IP is in list
- contextPath: IP not found in the list
  description: IP not found in the list
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  import json
  from typing import Dict, Any

  def get_score_from_list(ip: str, list_name: str) -> str:
      # Retrieve existing list data from Cortex XSOAR
      list_data = demisto.executeCommand("getList", {"listName": list_name})

      # Parse the existing list data as JSON
      try:
          existing_list = json.loads(list_data[0]["Contents"])
      except json.decoder.JSONDecodeError as e:
          raise ValueError(f'List does not contain valid JSON data: {e}')
      #if data is avilable the out put the Score data
      if ip in existing_list:
          entry = json.loads(existing_list[ip])
          score = entry['Score']
          usagetype = entry['Usage']

          result ={
              "Score" : score,
              "Usage Type" : usagetype
          }


          results = CommandResults(

              outputs_prefix='AbuseIPDBscorefromList',
              outputs =result
              )
          demisto.results('IP is in list')
          return (results)

      #If ip is not availble then mention as ip is not found in list
      else:
          demisto.results('IP not found in the list')
          return f'IP not found in the list'

  def main():
      ip = demisto.args().get('ip')
      list_name = demisto.args().get('list_name')

      try:
          scores = get_score_from_list(ip, list_name)
          return_results(scores)
      except Exception as ex:
          demisto.error(f'Failed to execute script. Error: {str(ex)}')

  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()





scripttarget: 0
subtype: python3
tags: []
type: python
