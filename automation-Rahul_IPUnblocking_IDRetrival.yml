args:
- description: IP to Unblock
  name: ip
  required: true
- description: 'Name of the list '
  name: list_name
  required: true
commonfields:
  id: fee68301-1a4e-4c7a-8152-e5ff7b894698
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.66339
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Rahul_IPUnblocking_IDRetrival
outputs:
- contextPath: cloudflareIPIDfromList
  description: id of Source IP
  type: string
- contextPath: IP not found in the list
  description: IP not found in the list
  type: string
- contextPath: IP is in list
  description: IP is in list
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  import json
  from typing import Dict, Any

  def get_IP_ID_from_list(ip: str, list_name: str) -> str:
      # Retrieve existing list data from Cortex XSOAR
      list_data = demisto.executeCommand("getList", {"listName": list_name})

      # Parse the existing list data as JSON
      try:
          existing_list = json.loads(list_data[0]["Contents"])
      except json.decoder.JSONDecodeError as e:
          raise ValueError(f'List does not contain valid JSON data: {e}')


      converting_input_to_list = ip.split(',')

      Cloudflare_IPID_List = []
      available_ip = []
      notavailable_IP = []


      for ip in converting_input_to_list:

          if ip in existing_list:

              available_ip.append(ip)
              entry = existing_list[ip]
              IP_ID = entry['id']
              Cloudflare_IPID_List.append(IP_ID)

              # demisto.results('IP is in list')
              # return (results)


          else:
              notavailable_IP.append(ip)
              #demisto.results('IP not found in the list')
              #return f'IP not found in the list'

      result = {
          "IP's in Ticket": demisto.args().get('ip'),
          "IP's Available in List":','.join(available_ip),
          "IP's Not Available in list":','.join(notavailable_IP),
          "IPID's of Available IP's":','.join(Cloudflare_IPID_List)
      }
      readable = tableToMarkdown("Output of the Script", result, headers=["IP's in Ticket","IP's Available in List","IP's Not Available in list","IPID's of Available IP's"])
      results = CommandResults(
                  readable_output = readable,
                  outputs_prefix='cloudflareIPIDfromList',
                  outputs =result
                  )

      if len(Cloudflare_IPID_List)>0:
          demisto.results('IP is in list')
      else:
          demisto.results('IP not found in the list')

      return (results)
      # print(Cloudflare_IPID_List)
      # print(available_ip)
      # print(notavailable_IP)


  def main():
      ip = demisto.args().get('ip')
      list_name = demisto.args().get('list_name')

      try:
          ip_id = get_IP_ID_from_list(ip, list_name)
          return_results(ip_id)
      except Exception as ex:
          demisto.error(f'Failed to execute script. Error: {str(ex)}')

  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()
scripttarget: 0
subtype: python3
tags: []
type: python
